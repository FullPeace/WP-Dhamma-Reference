<?php
/**
 * The FullPeace Media To Post Public defines all functionality for the frontend
 *
 * @package FPMTP
 *
 * The FullPeace Media To Post Public defines all functionality for the public-facing
 * sides of the plugin.
 *
 * This class defines the shortcodes used to display the custom posts
 * generated by the plugin, as well as templates to use if none are existing
 * for the custom post types and taxonomies.
 *
 * @since    0.1.0
 */
class FullPeace_Media_To_Post_Public {

    /**
     * @var bool
     */
    private static $initiated = false;
    /**
     * The templates array defines the templates available to use in the frontend.
     * @var array
     */
    private static $templates = array();

    /**
     * Initializes the class
     */
    public static function init() {
        if ( ! self::$initiated ) {
            self::init_hooks();
        }
    }

    /**
     * Initialize hooks
     */
    public static function init_hooks()
    {
        self::$initiated = true;

        // Add a filter to the attributes metabox to inject template into the cache.
//        add_filter(
//            'page_attributes_dropdown_pages_args',
//            array( 'FullPeace_Media_To_Post_Public', 'register_project_templates' )
//        );
//
//        // Add a filter to the save post to inject our template into the page cache
//        add_filter(
//            'wp_insert_post_data',
//            array( 'FullPeace_Media_To_Post_Public', 'register_project_templates' )
//        );
//
//        // Add a filter to the template include to determine if the page has our
//        // template assigned and return it's path
//        add_filter(
//            'template_include',
//            array( 'FullPeace_Media_To_Post_Public', 'view_project_template')
//        );
//
//        // Add our templates
//        self::setTemplates( array(
//            'single-'.FullPeace_Media_To_Post::$slug.'_audio_series.php' => 'Talks Series Template', // @todo Create this
//            //'talks-template.php'        => 'Talks Template',        // @todo Create this
//            //'series-template.php'       => 'Series Template',       // @todo Create this
//        ));
    }

    // get taxonomies terms links
    public static function custom_taxonomies_terms_links(){
        // get post by post id
        $post = get_post( get_the_ID() );

        // get post type by post
        $post_type = $post->post_type;

        // get post type taxonomies
        $taxonomies = get_object_taxonomies( $post_type, 'objects' );

        $out = array();
        foreach ( $taxonomies as $taxonomy_slug => $taxonomy ){

            // get the terms related to post
            $terms = get_the_terms( $post->ID, $taxonomy_slug );

            if ( !empty( $terms ) ) {
                $out[] = "<h2>" . $taxonomy->label . "</h2>\n<ul>";
                foreach ( $terms as $term ) {
                    $out[] =
                        '  <li><a href="'
                        .    get_term_link( $term->slug, $taxonomy_slug ) .'">'
                        .    $term->name
                        . "</a></li>\n";
                }
                $out[] = "</ul>\n";
            }
        }

        return implode('', $out );
    }

    public static function getAuthorBio($bookId){

    }

    public static function getBio($name){
        global $FPMTP;
        if(!empty($FPMTP['bios'][$name])) return $FPMTP['bios'][$name];
        return self::setBio($name, get_page_by_title( $name, 'OBJECT', 'fpmtp_bios' ));
    }

    public static function setBio($name, $post){
        global $FPMTP;
        $FPMTP['bios'][$name] = $post;
        return $FPMTP['bios'][$name];
    }

    /**
     * @return array
     */
    public static function getTemplates()
    {
        return self::$templates;
    }

    /**
     * @param array $templates
     */
    public static function setTemplates($templates)
    {
        self::$templates = $templates;
    }

    public static function register_project_templates( $atts ) {

        // Create the key used for the themes cache
        $cache_key = 'page_templates-' . md5( get_theme_root() . '/' . get_stylesheet() );

        // Retrieve the cache list.
        // If it doesn't exist or is empty, prepare an array
        $templates = wp_get_theme()->get_page_templates();
        if ( empty( $templates ) ) {
            $templates = array();
        }

        // New cache, therefore remove the old one
        wp_cache_delete( $cache_key , 'themes');

        // Now add our template to the list of templates by merging our templates
        // with the existing templates array from the cache.
        $templates = array_merge( $templates, self::getTemplates() );

        // Add the modified cache to allow WordPress to pick it up for listing
        // available templates
        wp_cache_add( $cache_key, $templates, 'themes', 1800 );

        return $atts;

    }

    /**
     * Checks if the template is assigned to the page
     * @var $template
     */
    public function view_project_template( $template )
    {
        global $post;

        if (!isset($this->templates[get_post_meta(
                $post->ID, '_wp_page_template', true
            )] ) )
        {
            return $template;
        }

        $file = plugin_dir_path(__FILE__). get_post_meta(
                $post->ID, '_wp_page_template', true
            );

        // Just to be safe, we check if the file exist first
        if( file_exists( $file ) ) {
            return $file;
        }
        else { echo $file; }

        return $template;
    }

    /**
     * Shortcode handler for [fpmtp_audio] shortcode
     * @param $atts
     */
    public static function custom_audio_shortcode( $atts ) {

        // Attributes
        extract( shortcode_atts(
                array(
                    'speaker' => '',
                    'series' => '',
                    'category' => '',
                    'year' => '',
                ), $atts )
        );

        // Code
        // return WP_Query( array( 'post_type' => FullPeace_Media_To_Post::$slug . '_audio' ) );
    }

    /**
     * Register shortcodes
     */
    public function register_shortcodes()
    {
        add_shortcode( FullPeace_Media_To_Post::$slug . '_audio', array('FullPeace_Media_To_Post_Public', 'custom_audio_shortcode') );
    }
}